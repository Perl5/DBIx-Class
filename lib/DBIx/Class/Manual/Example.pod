=head1 NAME

DBIx::Class::Manual::Example - Simple CD database example

=head1 DESCRIPTION

This tutorial will guide you through the process of setting up and
testing a very basic CD database using SQLite, with DBIx::Class::Schema
as the database frontend.

The database structure is based on the following rules:

  An artist can have many cds, and each cd belongs to just one artist.
  A cd can have many tracks, and each track belongs to just one cd.

The database is implemented with the following:

  table 'artist' with columns:  artistid, name
  table 'cd'     with columns:  cdid, artistid, title, year
  table 'track'  with columns:  trackid, cdid, title

Each of the table's first columns is the primary key; any subsequent
keys are foreign keys.

=head2 Installation

You'll need to install DBIx::Class via CPAN, and you'll also need to
install sqlite3 (not sqlite) if it's not already intalled.

=head3 Create the database/tables

First, create the database directory under the application directory,
then get into that directory, as we'll create the database there:

  mkdir app
  mkdir app/db
  cd app/db

Save the following into a file called example.sql:

  CREATE TABLE artist (
    artistid INTEGER PRIMARY KEY,
    name TEXT NOT NULL
  );

  CREATE TABLE cd (
    cdid INTEGER PRIMARY KEY,
    artist INTEGER NOT NULL REFERENCES artist(artistid),
    title TEXT NOT NULL,
    year TEXT
  );

  CREATE TABLE track (
    trackid INTEGER PRIMARY KEY,
    cd INTEGER NOT NULL REFERENCES cd(cdid),
    title TEXT NOT NULL
  );

Now create the SQLite database using that file:

  sqlite3 example.db < example.sql

=head3 Set up DBIx::Class::Schema

Go back to the app/ directory:

  cd ../

Now copy the examples/Schema/MyApp directory to this directory.

=head3 Populate the database

Run the script insertdb.pl, which will fill the database with the
required data for the following test script.

=head3 Create and run the test scripts

Run the script testdb.pl, which will test that the database has
successfully been filled.

When this script is run, it should output the following:

 get_tracks_by_cd(Bad):
 Leave Me Alone
 Smooth Criminal
 Dirty Diana
 
 get_tracks_by_artist(Michael Jackson):
 Billie Jean (from the CD 'Thriller')
 Leave Me Alone (from the CD 'Bad')
 Smooth Criminal (from the CD 'Bad')
 Beat It (from the CD 'Thriller')
 Dirty Diana (from the CD 'Bad')
 
 get_cd_by_track(Stan):
 The Marshall Mathers LP has the track 'Stan'.
 
 get_cds_by_artist(Michael Jackson):
 Thriller
 Bad
 
 get_artist_by_track(Dirty Diana):
 Michael Jackson recorded the track 'Dirty Diana'.
 
 get_artist_by_cd(The Marshall Mathers LP):
 Eminem recorded the CD 'The Marshall Mathers LP'.


=head3 Discussion about the results

The data model defined in this example has an artist with multiple CDs,
and a CD with multiple tracks; thus, it's simple to traverse from a
track back to a CD, and from there back to an artist. This is
demonstrated in the get_tracks_by_artist routine, where we easily walk
from the individual track back to the title of the CD that the track
came from ($track->cd->title).

Note also that in the get_tracks_by_cd and get_tracks_by_artist
routines, the result set is called multiple times with the 'next'
iterator.  In contrast, get_cd_by_track uses the 'first' result set
method, since only one CD is expected to have a specific track.

=head1 Notes

A reference implementation of the database and scripts in this example
are available in the main distribution for DBIx::Class under the
directory F<examples/Schema>.

With these scripts we're relying on @INC looking in the current
working directory.  You may want to add the MyApp namespaces to
@INC in a different way when it comes to deployment.

The F<testdb.pl> script is an excellent start for testing your database
model.

This example uses L<DBIx::Class::Schema/load_namespaces> to load in the
appropriate L<Result|DBIx::Class::Manual::ResultClass> classes from the
C<MyApp::Schema::Result> namespace, and any required
L<ResultSet|DBIx::Class::ResultSet> classes from the
C<MyApp::Schema::ResultSet> namespace (although we created the directory
in the directions above we did not add, or need to add, any resultset
classes).

=head1 TODO

=head1 AUTHOR

  sc_ from irc.perl.org#dbix-class
  Kieren Diment <kd@totaldatasolution.com>
  Nigel Metheringham <nigelm@cpan.org>

=cut
